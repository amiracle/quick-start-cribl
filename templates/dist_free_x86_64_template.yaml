AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Cribl LogStream Free Distributed Deployment (x86_64)

Parameters:
  leaderSshKeyPair:
    Description: "REQUIRED: Name of an existing EC2 key pair for SSH access to the leader instance."
    Type: AWS::EC2::KeyPair::KeyName
  workerSshKeyPair:
    Description: "REQUIRED: Name of an existing EC2 key pair for SSH access to the Worker instance. Can be the same key as the one used for the leader instance."
    Type: AWS::EC2::KeyPair::KeyName
  workerCount:
    Description: "REQUIRED: Enter the number of worker nodes desired"
    Type: String
  customworkerAmiId:
    Description: "OPTIONAL: Advanced setting. Leave blank unless advised to assign by Cribl Support."
    Type: String
  customleaderAmiId:
    Description: "OPTIONAL: Advanced setting. Leave blank unless advised to assign by Cribl Support."
    Type: String
  vpcId:
    Description: "REQUIRED: ID of your existing VPC."
    Type: AWS::EC2::VPC::Id
  subnetIds:
    Description: "REQUIRED: List of 2 subnet Ids in different AZs. These subnets must be in the same VPC as VPC ID above."
    Type: List<AWS::EC2::Subnet::Id>
  sshAccessCidr:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: "REQUIRED: CIDR IP range permitted to SSH access to the instance. We recommend you set this value to a trusted IP range."
  webAccessCidr:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: "REQUIRED: The CIDR IP range permitted to access the LogStream web console. We recommend you set this value to a trusted IP range."
  leaderInstanceType:
    Description: EC2 instance type to provision the LogStream leader instance. If none specified, c5.2xlarge will be used.
    Type: String
    Default: c5.2xlarge
    AllowedValues:
      - c5.4xlarge
      - c5.2xlarge
      - c5.xlarge
      - c5.large
      - c5d.4xlarge
      - c5d.2xlarge
      - c5d.xlarge
      - c5d.large
      - c5a.4xlarge
      - c5a.2xlarge
      - c5a.xlarge
      - c5a.large
      - c5ad.4xlarge
      - c5ad.2xlarge
      - c5ad.xlarge
      - c5ad.large

    ConstraintDescription: Must contain valid instance type
  workerInstanceType:
    Description: EC2 instance type to provision the LogStream worker instance. If none specified, c5.2xlarge will be used.
    Type: String
    Default: c5.2xlarge
    AllowedValues:
      - c5.4xlarge
      - c5.2xlarge
      - c5.xlarge
      - c5.large
      - c5d.4xlarge
      - c5d.2xlarge
      - c5d.xlarge
      - c5d.large
      - c5a.4xlarge
      - c5a.2xlarge
      - c5a.xlarge
      - c5a.large
      - c5ad.4xlarge
      - c5ad.2xlarge
      - c5ad.xlarge
      - c5ad.large
      
    ConstraintDescription: Must contain valid instance type
  AdditionalPolicies:
    Default:  "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore,arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
    Description: A comma separated list of Policy ARNs to add to the IAM role used by Logstream instances. Append to defaults, DO NOT REMOVE!
    Type: CommaDelimitedList    

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: leader Instance Configuration
        Parameters:
          - leaderSshKeyPair
          - leaderInstanceType
      - Label:
          default: Worker Instance Configuration
        Parameters:
          - workerSshKeyPair
          - workerInstanceType
          - workerCount
      - Label:
          default: Network Configuration
        Parameters:
          - vpcId
          - subnetIds
          - webAccessCidr
          - sshAccessCidr
      - Label:
          default: Advanced Settings
        Parameters:
          - customleaderAmiId
          - customworkerAmiId
          - AdditionalPolicies
    ParameterLabels:
      leaderSshKeyPair:
        default: leader SSH Key Name
      leaderInstanceType:
        default: leader Node EC2 Instance Type
      workerSshKeyPair:
        default: Worker SSH Key Name
      workerInstanceType:
        default: Worker Nodes EC2 Instance Type
      workerCount:
        default: Worker Count
      vpcId:
        default: VPC ID
      subnetIds:
        default: Subnet IDs
      webAccessCidr:
        default: Web Access CIDR
      sshAccessCidr:
        default: SSH Access CIDR
      customleaderAmiId:
        default: Custom leader AMI Id
      customworkerAmiId:
        default: Custom Worker AMI Id
      AdditionalPolicies:
        default: IAM Policies for node instance profiles

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll "AWS::EC2::VPC::Id"
        AssertDescription: All subnets must in the VPC

Conditions:
  customleaderAmiId: !Not [!Equals [!Ref customleaderAmiId, ""]]
  customworkerAmiId: !Not [!Equals [!Ref customworkerAmiId, ""]]

Mappings:
 RegionMap:
  ap-northeast-1:
    HVM64: ami-0ec6aee3faffb3cc8
  ap-northeast-2:
    HVM64: ami-0d5f9d5a198a6d126
  ap-south-1:
    HVM64: ami-02bfb29ef5b7e12ca
  ap-southeast-1:
    HVM64: ami-0078d7ac03c0d74fe
  ap-southeast-2:
    HVM64: ami-03b4c0267901d3dd8
  ca-central-1:
    HVM64: ami-0e235ba41c7ef212e
  eu-central-1:
    HVM64: ami-044e45f6a4b0c718b
  eu-north-1:
    HVM64: ami-0de17bd98529daca0
  eu-west-1:
    HVM64: ami-08d28bc23dea521d5
  eu-west-2:
    HVM64: ami-0e27d6df39a9cbf98
  eu-west-3:
    HVM64: ami-02c97e9564918d64e
  sa-east-1:
    HVM64: ami-01577732d7058192a
  us-east-1:
    HVM64: ami-08c381cf6e70cdec0
  us-east-2:
    HVM64: ami-0ef4bac28de23d41b
  us-west-1:
    HVM64: ami-0f8d1bbef118f40b7
  us-west-2:
    HVM64: ami-02d8e13e786cb117b

Resources:
  ec2leaderSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cribl LogStream Access
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref sshAccessCidr
          Description: SSH access to the LogStream leader instance
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: !Ref webAccessCidr
          Description: UI access to the LogStream leader instance
        - IpProtocol: tcp
          FromPort: 4200
          ToPort: 4200
          SourceSecurityGroupId: !GetAtt ec2WorkerSecurityGroup.GroupId
          Description: Cluster communications between leader and workers
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
          Description: Egress access

  ec2WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cribl LogStream Access
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref sshAccessCidr
          Description: SSH access to the LogStream worker instance(s)
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
          Description: Egress access

  s3DefaultDestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: Cribl LogStream default destination bucket

  LogstreamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub "/logstream/${AWS::StackName}/"
      Description: Cribl LogStream  IAM role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns: !Ref AdditionalPolicies
        
      Policies:
        - PolicyName: S3Destinations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub ${s3DefaultDestinationBucket.Arn}
                  - !Sub ${s3DefaultDestinationBucket.Arn}/*
        - PolicyName: S3Sources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetBucketLocation
                Resource: "*"
        - PolicyName: KinesisSources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:Get*
                  - kinesis:List*
                  - kinesis:Describe*
                Resource: "*"
        - PolicyName: SecretsManagerRead
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !Ref clusterAuthToken
      Tags:
        - Key: Name
          Value: Cribl LogStream default IAM role

  LogstreamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: !Sub "/logstream/${AWS::StackName}/"
      Roles:
        - !Ref LogstreamRole

  ec2leaderInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        !If [
          customleaderAmiId,
          !Ref customleaderAmiId,
          !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
        ]
      KeyName: !Ref leaderSshKeyPair
      InstanceType: !Ref leaderInstanceType
      SubnetId: !Select [0, !Ref subnetIds]
      IamInstanceProfile: !Ref LogstreamInstanceProfile
      SecurityGroupIds:
        - !Ref ec2leaderSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |
            #cloud-config

            runcmd:
              - export AWS_DEFAULT_REGION=${Region}
              - /usr/local/bin/configure_logstream.sh -m master -b ${s3DefaultDestinationBucket} -u ${clusterAuthToken}
              - sleep 10
              - cloud-init query -f "$(cat /opt/cribl_build/users.json.j2)" > /opt/cribl/local/cribl/auth/users.json
              - chown -R cribl:cribl /opt/cribl
          - s3DefaultDestinationBucket: !Ref s3DefaultDestinationBucket
            clusterAuthToken: !Ref clusterAuthToken
            Region: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: Cribl LogStream leader Instance
        - Key: Purpose
          Value: Machine data analysis

  clusterAuthToken:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: "Cribl Logstream Cluster Auth Token"
      GenerateSecretString:
        PasswordLength: 30
        ExcludePunctuation: true

  ec2WorkersAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref workerCount
      MaxSize: !Ref workerCount
      MinSize: !Ref workerCount
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref ec2WorkerslaunchTemplate
        Version: !GetAtt ec2WorkerslaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Select [0, !Ref subnetIds]
        - !Select [1, !Ref subnetIds]
      Tags:
        - Key: Name
          Value: Cribl LogStream Worker Nodes ASG
          PropagateAtLaunch: false

  ec2WorkersAutoScalingGroupLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref ec2WorkersAutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 3600
      LifecycleHookName: cribl-logstream-worker-shutdown
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"

  ec2WorkerslaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceInitiatedShutdownBehavior: terminate
        ImageId:        
          !If [
            customworkerAmiId,
            !Ref customworkerAmiId,
            !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
          ]
        
        InstanceType: !Ref workerInstanceType
        KeyName: !Ref workerSshKeyPair
        IamInstanceProfile:
          Arn: !GetAtt LogstreamInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref ec2WorkerSecurityGroup
        UserData: !Base64
          Fn::Sub:
            - |
              #cloud-config

              runcmd:
                - export AWS_DEFAULT_REGION=${Region}
                - /usr/local/bin/configure_logstream.sh -m worker -u ${clusterAuthToken} -H ${ec2leaderInstanceIp}

            - ec2leaderInstanceIp: !GetAtt ec2leaderInstance.PrivateIp
              clusterAuthToken: !Ref clusterAuthToken
              Region: !Ref AWS::Region
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Cribl LogStream Worker Instance

  workerShutdownEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Cribl LogStream Worker Shutdown Event"
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance-terminate Lifecycle Action"
        detail:
          AutoScalingGroupName:
            - !Ref ec2WorkersAutoScalingGroup
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt functionWorkerShutdown.Arn
          Id: "WorkerShutdownFunction"

  lamdbaPermissionWorkerShutdownEventRule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref functionWorkerShutdown
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt workerShutdownEventRule.Arn

  functionWorkerShutdown:
    Type: AWS::Serverless::Function
    Properties:
      Description: Cribl LogStream Worker Shutdown
      InlineCode: |
        import boto3
        import logging
        import json
        import time
        import os

        ssm = boto3.client('ssm')
        autoscaling = boto3.client('autoscaling')

        # Logging
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)

        def handler(event, context):
          log.debug("Received event {}".format(json.dumps(event)))

          command = ssm.send_command(
            InstanceIds=[event['detail']['EC2InstanceId'],],
            DocumentName='AWS-RunShellScript',
            Comment='Gracefully terminate Cribl LogStream worker node',
            Parameters={"commands":["systemctl disable cribl","systemctl daemon-reload","systemctl stop cribl"],"workingDirectory":[""],"executionTimeout":["3600"]},
            CloudWatchOutputConfig={
                'CloudWatchOutputEnabled': True
            }
          )

          command_id = command['Command']['CommandId']

          for x in range(0,59):
            time.sleep(10)
            response = ssm.get_command_invocation(
                CommandId=command_id,
                InstanceId=event['detail']['EC2InstanceId'],
            )
            if response.get('Status') == 'Success':
              break
            else:
              continue

          autoscaling.complete_lifecycle_action(
            LifecycleHookName=event['detail']['LifecycleHookName'],
            AutoScalingGroupName=event['detail']['AutoScalingGroupName'],
            LifecycleActionToken=event['detail']['LifecycleActionToken'],
            LifecycleActionResult='CONTINUE',
            InstanceId=event['detail']['EC2InstanceId']
          )
      Policies:
        - Statement:
            - Action: ["ssm:SendCommand"]
              Effect: Allow
              Resource: "*"
              Condition:
                StringEquals:
                  "aws:ResourceTag/aws:ec2launchtemplate:id": !Ref ec2WorkerslaunchTemplate
            - Action: ["ssm:SendCommand"]
              Effect: Allow
              Resource: !Sub "arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript"
            - Action: ["autoscaling:CompleteLifecycleAction"]
              Effect: Allow
              Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ec2WorkersAutoScalingGroup}"
            - Action: ["ssm:GetCommandInvocation"]
              Effect: Allow
              Resource: "*"
      Runtime: python3.7
      Timeout: 600
      Handler: index.handler


Outputs:
  logstreamWebUrlPublic:
    Value: !Sub http://${ec2leaderInstance.PublicIp}:9000/login
    Description: Cribl LogStream Web URL (PublicIp)
  logstreamWebAccessCreds:
    Value: !Sub "admin / ${ec2leaderInstance}"
    Description: Default Web Access Credentials
  stackName:
    Value: !Sub "${AWS::StackName}"
    Description: CFN Stack Name